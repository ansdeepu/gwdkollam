
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for roles and authentication status
    function isSignedIn() {
      return request.auth != null;
    }

    function isApproved() {
      // isApproved is a field in the user's document in the /users collection.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true;
    }

    function isRole(role) {
      return isApproved() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isEditor() {
      return isRole('editor');
    }

    function isSupervisor() {
      return isRole('supervisor');
    }
    
    function isViewer() {
      return isRole('viewer');
    }
    
    function canReadCollection() {
      return isEditor() || isViewer();
    }
    
    function canWriteCollection() {
        return isEditor();
    }

    // === User Profiles ===
    // Editors/Viewers can see all profiles.
    // An authenticated user can read their own profile.
    match /users/{userId} {
      allow read: if canReadCollection() || request.auth.uid == userId;
      allow write: if isEditor();
    }

    // === Main File Entries (Deposit Works) ===
    // Read: Editors/Viewers can read all. Supervisors can only read files they are assigned to.
    // The `list` operation for supervisors is intentionally broad here because Firestore rules
    // cannot filter a collection list based on document content. The actual security is
    // enforced by the queries within the application code (e.g., using a `where` clause),
    // which Firestore will allow if the rule passes. The `get` rule secures direct document access.
    match /fileEntries/{docId} {
      allow get: if canReadCollection() || (isSupervisor() && resource.data.assignedSupervisorUids.hasAny([request.auth.uid]));
      allow list: if canReadCollection() || isSupervisor();
      allow create, update, delete: if canWriteCollection();
    }

    // === ARS Entries ===
    // Read: Editors/Viewers can read all. Supervisors can only read entries they are assigned to.
    // Similar to fileEntries, the `list` rule is broad, and security relies on secure client-side queries.
    match /arsEntries/{docId} {
      allow get: if canReadCollection() || (isSupervisor() && resource.data.supervisorUid == request.auth.uid);
      allow list: if canReadCollection() || isSupervisor();
      allow create, update, delete: if canWriteCollection();
    }
    
    // === Pending Updates from Supervisors ===
    // Create: Supervisors and Editors can create pending updates.
    // Read, Update, Delete: Only Editors can manage pending updates.
    match /pendingUpdates/{docId} {
      allow create: if isSupervisor() || isEditor();
      allow read, update, delete: if isEditor();
    }

    // === Staff Members (Establishment) ===
    // Read: Any approved user can read the staff list.
    // Write: Only Editors can manage staff members.
    match /staffMembers/{docId} {
      allow read: if isApproved();
      allow write: if isEditor();
    }
    
    // === Agency Registrations ===
    // Read: Any approved user can read agency data.
    // Write: Only Editors can manage agency data.
    match /agencyApplications/{docId} {
        allow read: if isApproved();
        allow write: if isEditor();
    }
    
    // === GWD Rates ===
    // Read: Any approved user can read the rates.
    // Write: Only Editors can manage rates.
    match /gwdRates/{docId} {
        allow read: if isApproved();
        allow write: if isEditor();
    }
  }
}
