
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated and their profile exists.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get the requesting user's profile data.
    function getRequestingUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Helper function to check if the user is an approved editor.
    function isEditor() {
      return isSignedIn() && getRequestingUserData().role == 'editor' && getRequestingUserData().isApproved == true;
    }

    // Helper function to check if the user is an approved user (any role).
    function isApprovedUser() {
      return isSignedIn() && getRequestingUserData().isApproved == true;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any approved user can see the list of users.
      allow read: if isApprovedUser();
      
      // Only editors can create or delete users.
      allow create, delete: if isEditor();

      // An editor can update any user. A user can update their own profile,
      // but they cannot change their own role or approval status.
      allow update: if isEditor() || (
        request.auth.uid == userId &&
        !(request.resource.data.role is string && request.resource.data.role != resource.data.role) &&
        !(request.resource.data.isApproved is bool && request.resource.data.isApproved != resource.data.isApproved)
      );
    }

    // Rules for data collections that require editor privileges for writing.
    match /{collection}/{docId} where collection in ['staffMembers', 'gwdRates', 'fileEntries', 'arsEntries', 'agencyApplications', 'notices'] {
      // Any authenticated and approved user can read from these collections.
      allow read: if isApprovedUser();
      
      // Only editors can write (create, update, delete) to these collections.
      allow write: if isEditor();
    }
    
    // Rules for the 'pendingUpdates' collection, which has special logic.
    match /pendingUpdates/{updateId} {
        // Only editors can read all pending updates.
        // (Supervisors interact with this through a specific backend check, not direct reads).
        allow read: if isEditor();
        
        // Any approved user (specifically supervisors) can create a pending update.
        allow create: if isApprovedUser();
        
        // Only editors can update (approve/reject) or delete pending updates.
        allow update, delete: if isEditor();
    }
  }
}
