
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for roles and authentication status
    function isSignedIn() {
      return request.auth != null;
    }

    function isApproved() {
      // isApproved is a field in the user's document in the /users collection.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isApproved == true;
    }

    function isRole(role) {
      return isApproved() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isEditor() {
      return isRole('editor');
    }

    function isSupervisor() {
      return isRole('supervisor');
    }
    
    function isViewer() {
      return isRole('viewer');
    }
    
    function canReadCollection() {
      return isEditor() || isViewer();
    }
    
    function canWriteCollection() {
      return isEditor();
    }

    // === User Profiles ===
    // Editors/Viewers can see all profiles.
    // An authenticated user can read their own profile.
    match /users/{userId} {
      allow read: if canReadCollection() || request.auth.uid == userId;
      allow write: if isEditor();
    }

    // === Main File Entries (Deposit Works) ===
    match /fileEntries/{docId} {
      // Read access: Editors/Viewers can get any document. Supervisors can only get documents they are assigned to.
      allow get: if canReadCollection() || (isSupervisor() && resource.data.assignedSupervisorUids.hasAny([request.auth.uid]));
      
      // List access: This is intentionally more permissive for supervisors because their ability to list documents 
      // is already constrained by the client-side query which filters by their UID. Firestore security rules
      // for list operations check the query, not the data, so this rule allows the secure query to pass.
      allow list: if canReadCollection() || isSupervisor();
      
      // Write access: Only editors can create, update, or delete file entries directly.
      // Supervisors must use the pendingUpdates collection.
      allow create, update, delete: if canWriteCollection();
    }

    // === ARS Entries ===
    match /arsEntries/{docId} {
      allow get: if canReadCollection() || (isSupervisor() && resource.data.supervisorUid == request.auth.uid);
      allow list: if canReadCollection() || isSupervisor(); // See comment for fileEntries list rule.
      allow create, update, delete: if canWriteCollection();
    }
    
    // === Pending Updates from Supervisors ===
    match /pendingUpdates/{docId} {
      // Supervisors can create updates. They can also read and delete updates they have submitted.
      allow create: if isSupervisor() || isEditor();
      allow read, delete: if (isSupervisor() && request.auth.uid == resource.data.submittedByUid) || isEditor();
      
      // Only editors can approve/reject by updating the status.
      allow update: if isEditor();
    }

    // === Staff Members (Establishment) ===
    match /staffMembers/{docId} {
      allow read: if isApproved();
      allow write: if isEditor();
    }
    
    // === Agency Registrations ===
    match /agencyApplications/{docId} {
      allow read: if isApproved();
      allow write: if isEditor();
    }
    
    // === GWD Rates ===
    match /gwdRates/{docId} {
      allow read: if isApproved();
      allow write: if isEditor();
    }
  }
}
